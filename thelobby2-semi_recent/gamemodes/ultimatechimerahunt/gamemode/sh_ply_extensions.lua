local meta = FindMetaTable( "Player" )if ( !meta ) then return endfunction meta:SetupModel()	//Msg( "Trying to set model for " .. tostring( self ), "\n" )	if self:GetNWBool("IsChimera") then		//Msg( "Setting Chimera model for " .. tostring( self ), "\n" )		self:SetModel( "models/UCH/uchimeraGM.mdl" )		self:SetSkin( 0 )		self:SetBodygroup( 1, 1 )		return	end		if self:GetNWBool("IsGhost") then		//Msg( "Setting Ghost model for " .. tostring( self ), "\n" )		self:SetModel( "models/UCH/mghost.mdl" )		if self:GetNWBool("IsFancy") then			self:SetBodygroup( 1, 1 )		else			self:SetBodygroup( 1, 0 )		end		return	end	//Msg( "Setting Pig model for " .. tostring( self ), "\n" )	self:SetModel( "models/UCH/pigmask.mdl" )	self:SetRankModels()	self:SetBodygroup( 4, 1 )endfunction meta:IsPig()		if self:Alive() && self:Team() == TEAM_PIGS then		return true	end		return falseendfunction meta:Squeal( ent )	if self:Team() != TEAM_PIGS then return end	local ent = ent or self	ent:EmitSound( "UCH/pigs/squeal" .. tostring( math.random( 1, 3 ) ) .. ".wav", 92, math.random( 90, 105 ) )endfunction meta:ResetVars()	/* Reset Jump */	self:SetView( 48 )	self:SetJumpPower( 242 )		/* Reset Speeds */	self:SetupSpeeds()  //set the speeds		/* Reset Sprint */	self:SetNWFloat("Sprint",1)	self:SetNWBool("IsSprinting",false)	self:SetNWBool("IsStunned",false)	self:SendLua( "LocalPlayer().SprintMeterSmooth = 1" )	/* Reset Pig Stuff */	self:StopTaunting()	self:UnScare()	self:SetNWBool("IsPancake",false)		/* Set Rank */	self:SetRank( self:GetNWInt("NextRank") )	if self:IsPig() && self:GetNWInt("Rank") == RANK_COLONEL then		self:SetAchievement( ACHIEVEMENTS.UCHCAPE, 1 )	end	/* Chimera Variables */	if self:GetNWBool("IsChimera") then		self:ResetUCVars()	end		/* Saturn */	if IsValid( self.HeldSaturn ) then		self.HeldSaturn = nil	end	self:SetNWBool("HasSaturn",false)	GAMEMODE:UpdateHull( self )endfunction meta:CanTaunt()	if (!self:GetNWBool("IsTaunting") && !self:GetNWBool("IsScared") && !self:GetNWBool("IsSprinting") && self:IsOnGround() && self:Team() == TEAM_PIGS) then		return true	end	return falseendfunction meta:MovementKeyDown()		if (self:KeyDown( IN_FORWARD ) || self:KeyDown( IN_BACK ) || self:KeyDown( IN_MOVELEFT ) || self:KeyDown( IN_MOVERIGHT )) then		return true		end		return falseendif SERVER then	function meta:SendSound( snd )		if !snd then return end				self:EmitSound( snd )			end		function meta:StripSaturn()			if !self:GetNWBool("HasSaturn") then return end				if IsValid( self.HeldSaturn ) then			self.HeldSaturn:Remove()			self.HeldSaturn = nil		end		local ent = ents.Create( "mr_saturn" )		if IsValid( ent ) then			ent:SetPos( self:GetPos() + Vector( 0, 0, 30 ) )			ent:Spawn()			ent:Activate()			ent.ShouldSpaz = true							local phys = ent:GetPhysicsObject()			if IsValid( phys ) then				phys:SetVelocity( self:GetPos() + Vector( 0, 0, 30 ) + ( VectorRand() * 150 ) )			end		end			end		function meta:IsMoving()			local vel = self:GetVelocity()		return vel:Length() > 0		end	function meta:MakePiggyNoises()		if !self:IsPig() then return end		self.LastSnort = self.LastSnort || CurTime() + math.random( 9, 14 )		if CurTime() >= self.LastSnort then						self:EmitSound( "UCH/pigs/snort" .. tostring( math.random( 1, 4 ) ) .. ".wav", 75, math.random( 90, 105 ) )			local num = math.Rand( 6, 9 )			if self:GetNWBool("IsScared") || !self:CanSprint() then				num = num * .25			end						self.LastSnort = CurTime() + num					end	end	function meta:SetupSpeeds()		local spd, cspd = 175, .3		if GAMEMODE:IsPlaying() && self:GetNWBool("IsChimera") then			spd, cspd = 112, 1		end		if self:GetNWBool("IsGhost") then			spd, cspd = 250, 1		end		self:SetSpeed( spd )		self:SetCrouchedWalkSpeed( cspd )		self:SetDuckSpeed( .25 )	end	function meta:UpdateSpeeds()		if !GAMEMODE:IsPlaying() then			self:SetupSpeeds()		end		if (self:GetNWBool("IsSprinting") || self:GetNWBool("IsScared")) then			local spd, cspd = 375, .5			if self:GetNWBool("IsScared") then				spd = 242			end						if self:GetNWBool("IsChimera") && GAMEMODE.UCAngry then				spd = 350			elseif self:GetNWBool("IsChimera") then				spd = 300			end			self:SetSpeed( spd )			self:SetCrouchedWalkSpeed( cspd )		else			self:SetupSpeeds()		end				if self:GetNWBool("IsStunned") && !self:GetNWBool("IsChimera") then			self:SetSpeed( 0 )		end	end	function meta:SetSpeed( spd )		self:SetWalkSpeed( spd )		self:SetRunSpeed( spd )	end	function meta:CreateUCHRagdoll( pig )				/*umsg.Start( "CreateUCHRagdoll" )			umsg.Entity( self )			if ( b ) then				umsg.Entity( GAMEMODE:GetUC())			end		umsg.End()*/		if self:GetNWBool("IsGhost") then return end		if IsValid( self.Ragdoll ) then			self.Ragdoll:Remove()		end		local rag = ents.Create( "prop_ragdoll" )			rag:SetModel( self:GetModel() )			rag:SetPos( self:GetPos() + Vector( 0, 0, 24 ) )			rag:SetAngles( self:GetAngles() )		rag:Spawn()		if !IsValid( rag ) then return end		rag:SetCollisionGroup( COLLISION_GROUP_DEBRIS )		local entvel		local entphys = self:GetPhysicsObject()			if IsValid( entphys ) then			entvel = entphys:GetVelocity()		else			entvel = self:GetVelocity()		end		if pig then			self:Squeal( rag )		end		for i = 1, rag:GetPhysicsObjectCount() do			local bone = rag:GetPhysicsObjectNum( i )			if IsValid( bone ) then				local bonepos, boneang = self:GetBonePosition( rag:TranslatePhysBoneToBone( i ) )				bone:SetPos( bonepos )				bone:SetAngle( boneang )								if pig && IsValid( GAMEMODE:GetUC() ) then										local fwd = GAMEMODE:GetUC():GetForward()					fwd.z = 0					fwd:Normalize()										entvel = entvel + ( fwd * 3200 ) + Vector( 0, 0, 1600 )									end								bone:ApplyForceOffset( self:GetVelocity(), self:GetPos() )				bone:AddVelocity( entvel )			end		end		rag:SetSkin( self:GetSkin() )		rag:SetColor( self:GetColor() )		rag:SetMaterial( self:GetMaterial() )		for i = 1, 2 do			rag:SetBodygroup( i, self:GetBodygroup( i ) )		end		self.Ragdoll = rag		rag.CollideVar = true		timer.Simple( 32, function()			if IsValid( rag ) && rag != GAMEMODE:GetUC():GetRagdollEntity() then				rag:Remove()			end		end )		return rag	end	function meta:StopTaunting()		self:SetNWBool("IsTaunting",false)	end		function meta:Taunt( t, playback )		if (self:IsPig() && self:GetNWBool("IsTaunting")) then return end		self:SetNWBool("IsTaunting",true)				//for achievement		local uc = GAMEMODE:GetUC()		local dist = self:GetPos():Distance( uc:GetPos() )		if dist <= 812 && uc:Alive() && !uc.Pressed then			self:AddAchievement( ACHIEVEMENTS.UCHTAUNTING, 1 )		end		self:SetCycle( 0 )		local seq = self:LookupSequence( t )		self:ResetSequence( seq )				self:PlaybackRateOV( playback )		RestartAnimation( self )		timer.Simple( self:SequenceDuration() * ( .98 / self:GetNWFloat("PlaybackRate") ), function()			if IsValid( self ) then				self:StopTaunting()				self:PlaybackReset()			end		end )			end			function meta:SetView( num )		self:SetViewOffset( Vector( 0, 0, num))		self:SetViewOffsetDucked( Vector( 0, 0, ( num * .75)))	end			/*function meta:PlaySpawnSound()  //replaced by a 100 times better music system		if self:GetNWBool("IsGhost") then return end				self.LastSpawnSound = self.LastSpawnSound || 0				if CurTime() >= self.LastSpawnSound then						local rank = self:GetRankName()			if self:GetNWBool("IsChimera") then				rank = "chimera"			end			self:SendSound( "UCH/music/cues" .. rank:lower() .. "_spawn.mp3" )			self.LastSpawnSound = CurTime() + 15		end	end*/		/*hook.Add( "Think", "UC_Swimming", function()		for k, ply in pairs( player.GetAll() ) do			if ply:WaterLevel() > 0 then				if ply:IsOnGround() && ply:WaterLevel() <= 2 then					if ply:GetNWBool("IsSwimming") then						ply:SetNWBool("IsSwimming",false)					end				else					if !ply:GetNWBool("IsSwimming") then						ply:SetNWBool("IsSwimming",true)					end				end			else				if ply:GetNWBool("IsSwimming") then					ply:SetNWBool("IsSwimming",false)				end			end		end			end )*/end/*	function meta:CreateRagdoll( pig, ply )			local rag = ents.Create( "hl2mp_ragdoll" )			rag:SetModel( self:GetModel() )			rag:SetPos( self:GetPos() )			rag:SetAngles( self:GetAngles() )		rag:Spawn()		if !IsValid( rag ) then	return end		rag:SetCollisionGroup( COLLISION_GROUP_DEBRIS )		local entvel		local entphys = self:GetPhysicsObject()		if IsValid( entphys ) then			entvel = entphys:GetVelocity()		else			entvel = self:GetVelocity()		end		for i = 1, rag:GetPhysicsObjectCount() do			local bone = rag:GetPhysicsObjectNum( i )			if IsValid( bone ) then				local bonepos, boneang = self:GetBonePosition( rag:TranslatePhysBoneToBone( i ) )				bone:SetPos( bonepos )				bone:SetAngle( boneang )								if pig then					local fwd = ply:GetForward()					fwd.z = 0					fwd:Normalize()										entvel = entvel + ( fwd * 3200 )				end				bone:ApplyForceOffset( self:GetVelocity(), self:GetPos() )				bone:AddVelocity( entvel )			end		end		rag:SetSkin( self:GetSkin() )		rag:SetColor( self:GetColor() )		rag:SetMaterial( self:GetMaterial() )		for i = 1, 2 do			rag:SetBodygroup( i, self:GetBodygroup( i ) )		end		return rag	end		local function CreateRagdolls( um )		local ply = um:ReadEntity()		local UC = ( um:ReadEntity() || nil )				local pig = ( UC != nil && true ) || false				local rag = ply:CreateRagdoll( pig, UC )		timer.Simple( 32, function()			if ( IsValid( rag)) then				rag:Remove()			end		end )	end	usermessage.Hook( "CreateUCHRagdoll", CreateRagdolls )end*/